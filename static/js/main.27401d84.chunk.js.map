{"version":3,"sources":["component/Home.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","className","id","mess1","mess2","mess3","mess4","mess5","mess6","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOAiCeA,MA/Bf,SAAcC,GACV,OACI,yBAAKC,UAAU,aACX,wBAAIA,UAAU,SAAd,8BAEA,yBAAKA,UAAY,OACjB,wBAAIC,GAAG,SAASF,EAAMG,OADtB,IACkC,wBAAID,GAAG,QAAP,MAElC,yBAAKD,UAAY,OACjB,wBAAIC,GAAG,SAASF,EAAMI,OADtB,IACkC,wBAAIF,GAAG,QAAP,MAElC,yBAAKD,UAAY,OACjB,wBAAIC,GAAG,SAASF,EAAMK,OADtB,IACkC,wBAAIH,GAAG,QAAP,MAElC,yBAAKD,UAAY,OACjB,wBAAIC,GAAG,SAASF,EAAMM,OADtB,IACkC,wBAAIJ,GAAG,QAAP,MAElC,yBAAKD,UAAY,OACjB,wBAAIC,GAAG,SAASF,EAAMO,OADtB,IACkC,wBAAIL,GAAG,QAAP,MAElC,yBAAKD,UAAY,OACjB,wBAAIC,GAAG,SAASF,EAAMQ,OADtB,IACkC,wBAAIN,GAAG,QAAP,MAGlC,yBAAKD,UAAU,UACX,wBAAIA,UAAU,OAAd,0BCLDQ,MAff,WACE,OACE,yBAAKR,UAAU,QAGb,kBAAC,EAAD,CAAME,MAAM,mBAAmBC,MAAM,8BAA8BC,MAAM,6BAA6BC,MAAM,mBAAmBC,MAAM,+BAA+BC,MAAM,oCCA5JE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.27401d84.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Home(props) {\n    return (\n        <div className=\"rectangle\">\n            <h1 className=\"title\">Frequently Asked Questions</h1>\n            \n            <div className = \"que\">\n            <h3 id=\"mess1\">{props.mess1}</h3> <h3 id=\"plus\">+</h3>\n            </div>\n            <div className = \"que\">\n            <h3 id=\"mess2\">{props.mess2}</h3> <h3 id=\"plus\">+</h3>\n            </div>\n            <div className = \"que\">\n            <h3 id=\"mess3\">{props.mess3}</h3> <h3 id=\"plus\">+</h3>\n            </div>\n            <div className = \"que\">\n            <h3 id=\"mess4\">{props.mess4}</h3> <h3 id=\"plus\">+</h3>\n            </div>\n            <div className = \"que\">\n            <h3 id=\"mess5\">{props.mess5}</h3> <h3 id=\"plus\">+</h3>\n            </div>\n            <div className = \"que\">\n            <h3 id=\"mess6\">{props.mess6}</h3> <h3 id=\"plus\">+</h3>\n            </div>\n\n            <div className=\"redbtn\">\n                <h3 className=\"try\">TRY 30 DAYS FREE  ></h3>\n            </div>\n            \n        </div>\n    )\n}\nexport default Home","import React from 'react';\n\nimport './App.css';\nimport Home from './component/Home.js'\n// import Question from './component/Question.js'\n\n\nfunction App() {\n  return (\n    <div className=\"list\">\n      \n\n      <Home mess1=\"What is Netflix?\" mess2=\"How much does Netflix cost?\" mess3=\"Where can I watch Netflix?\" mess4=\"How do I cancel?\" mess5=\"What can I watch on Netflix?\" mess6=\"How does the free trial work?\" />\n\n\n\n    </div>\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}